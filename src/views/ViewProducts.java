//Package:
package views;

//Imports:
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import models.Customer;
import models.DbManager;
import models.Order;
import models.OrderLine;
import models.Product;

public class ViewProducts extends javax.swing.JFrame
{
    //Attributes:
    private Customer loggedInCustomer;//Logged in user details
    private HashMap<Integer, Product> allProducts;//Product list retrieved from db
    private Order currentOrder;//Details of order made
    
    public ViewProducts(Customer customer)
    {
        loggedInCustomer = customer;
        
        initComponents();//Load view
        
        DbManager db = new DbManager();
        allProducts = db.loadProducts();//Retrieve products from db
        
        if(loggedInCustomer.getIsRegistered())//If the user is a registered customer
        {
            currentOrder = loggedInCustomer.findLatestOrder();//Populate currentOrder
        }
        else//The user is viewing all products without logging in
        {
            btnViewBasket.setVisible(false);//Disable Add To Basket button
        }
    }

    /**
     * This method is called from within the constructor to initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnBack = new javax.swing.JButton();
        btnViewBasket = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstCategories = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstProducts = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        btnAddToBasket = new javax.swing.JButton();
        cmbQuantity = new javax.swing.JComboBox<>();
        LBL_QUANTITY = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnViewBasket.setText("View Basket");
        btnViewBasket.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewBasketActionPerformed(evt);
            }
        });

        jLabel1.setText("Categories");

        lstCategories.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Clothing", "Footwear" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        lstCategories.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstCategoriesValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(lstCategories);

        lstProducts.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstProductsValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(lstProducts);

        jLabel2.setText("Product");

        btnAddToBasket.setText("Add To Basket");
        btnAddToBasket.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddToBasketActionPerformed(evt);
            }
        });

        LBL_QUANTITY.setText("Quantity:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setText("Products");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnBack)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(btnViewBasket))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(LBL_QUANTITY)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmbQuantity, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel1)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(92, 92, 92)
                                .addComponent(btnAddToBasket)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBack)
                    .addComponent(btnViewBasket)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddToBasket)
                    .addComponent(cmbQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LBL_QUANTITY))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void lstCategoriesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstCategoriesValueChanged
        
        DefaultListModel productList = new DefaultListModel();
        
        String selectedCategory = lstCategories.getSelectedValue();//Retrieve selected category

        for(Map.Entry<Integer, Product> productEntry : allProducts.entrySet())//For every product stored on the db
        {
            Product product = productEntry.getValue();
            
            if(product.getClass().getName().equals("models." + selectedCategory))//Only retrieve products of particular category
            {
                if(product.getStockLevel() > 0)//If there is stock left
                {
                    productList.addElement(product);//Add product to list to be displayed
                }
            }
        }
        
        //Display retrieved products from category:
        lstProducts.setModel(productList);
        
    }//GEN-LAST:event_lstCategoriesValueChanged

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        
        if(loggedInCustomer.getIsRegistered())//Customer is logged in
        {
            //Navigate to CustomerHome view:
            CustomerHome customerHome = new CustomerHome(loggedInCustomer);
            this.dispose();
            customerHome.setVisible(true);
        }
        else//Customer isn't logged in
        {
            MainMenu mainMenu = new MainMenu();
            this.dispose();
            mainMenu.setVisible(true);
        }

    }//GEN-LAST:event_btnBackActionPerformed

    private void lstProductsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstProductsValueChanged
        
        //Dynamically change quantity drop down box depending on stock level
        
        //Retrieve stock level(if there is stock!)
        if(lstProducts.getSelectedIndex() != -1)//i.e. something is selected
        {
            Object selectedObject = (Object)lstProducts.getSelectedValue();
            Product selectedProduct = (Product)selectedObject;
            
            //Retreive stock level:
            int stockLevel = selectedProduct.getStockLevel();
            
            //Update drop down quantity box (combo box)
            refreshQuantity(stockLevel);
        }
        
    }//GEN-LAST:event_lstProductsValueChanged

    private void btnAddToBasketActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddToBasketActionPerformed
        
        if(loggedInCustomer.getIsRegistered())//Ensure the customer has logged in first
        {
            if(lstProducts.getSelectedIndex() == -1)//Ensure a product is selected
            {
                JOptionPane.showMessageDialog
                (null, "Please select a product category and then your product of choice as well as quantity to proceed.");
            }
            
            else
            {
                
                //Retrieve order stats:
                Object selectedObject = (Object)lstProducts.getSelectedValue();
                Product selectedProduct = (Product)selectedObject;//Selected product object
                int quantity = Integer.parseInt(cmbQuantity.getSelectedItem().toString());//Quantity selected by user
                int totalStock = selectedProduct.getStockLevel();//Total stock available to sell of said product

                Optional<OrderLine> orderLineWithSelectedProduct = currentOrder.findProductInBasket(selectedProduct.getProductId());//Find previous orders of same product (if any)
                
                if(!orderLineWithSelectedProduct.isPresent())//You do not have the same product already in your basket
                {
                    OrderLine newOrderLine = new OrderLine(0, selectedProduct, quantity);
                    currentOrder.addOrderLine(newOrderLine);

                    JOptionPane.showMessageDialog(null, "Product successfully added to basket!");//Confirmation msg
                }
                
                else//You have the same product already in your basket
                {
                    OrderLine actualOrderLineWithProduct = orderLineWithSelectedProduct.get();
                    
                    int quantityInBasket = actualOrderLineWithProduct.getQuantity();//(selectedProduct.getProductId());//Retrieve quantity of order of the same product prev placed

                    //If CAN add to basket
                    if(totalStock >= (quantity + quantityInBasket))//If there is sufficient stock
                    {
                        
                        int newQuantity =  quantityInBasket + quantity;//Calculate new quantity
                        double lineTotal = newQuantity * selectedProduct.getPrice();//Calculate new line total

                        actualOrderLineWithProduct.setQuantity(newQuantity);//Update quantity with newly calculated quantity
                        actualOrderLineWithProduct.setLineTotal(lineTotal);//Update line total with newly calculated line total
                   
                        DbManager db = new DbManager();
                        db.editOrderLine(actualOrderLineWithProduct);//Update db

                        currentOrder.calculateOrderTotal();//Update locally
                        
                        JOptionPane.showMessageDialog(null, "Product successfully added to basket!");//Confirmation msg
                    }
                    
                    else //Not enough stock
                    {
                        JOptionPane.showMessageDialog(null, "Not enough stock available."); 
                    }
                
                }
                
            }
            
        }
        
        else//If customer has not logged in then navigate them towards the log in page
        {
            
            JOptionPane.showMessageDialog(null, "You must be logged in to make a purchase.");
            
            CustomerLogin custLogin = new CustomerLogin();//prev CustomerLogin(true);
            this.dispose();
            custLogin.setVisible(true);
        }
        
    }//GEN-LAST:event_btnAddToBasketActionPerformed

    private void btnViewBasketActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewBasketActionPerformed
        
        //Navigate to View Basket page
        ViewBasket viewBasket = new ViewBasket(loggedInCustomer);
        this.dispose();
        viewBasket.setVisible(true);
        
    }//GEN-LAST:event_btnViewBasketActionPerformed

    //Various Methods:
    
    public void refreshQuantity(int stockLevel)
    {
        if(cmbQuantity.getItemCount() > 0)//If the combo box is already populated
        {
            cmbQuantity.removeAllItems();
        }
        
        for(int i = stockLevel; i > 0; i--)
        {
            cmbQuantity.addItem(Integer.toString(stockLevel));//Add entry to combo box
            
            stockLevel--;//Decrement stock level
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewProducts.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewProducts.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewProducts.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewProducts.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                //EMPTY
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel LBL_QUANTITY;
    private javax.swing.JButton btnAddToBasket;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnViewBasket;
    private javax.swing.JComboBox<String> cmbQuantity;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<String> lstCategories;
    private javax.swing.JList<String> lstProducts;
    // End of variables declaration//GEN-END:variables
}
